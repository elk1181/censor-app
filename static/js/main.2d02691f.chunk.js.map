{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","filter","require","App","props","showFile","e","a","preventDefault","reader","FileReader","onload","text","target","result","console","log","alert","document","getElementById","innerHTML","innerText","readAsText","files","myRef","React","createRef","element","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","clean","className","onChange","contentEditable","onClick","this","handleClick","censor","id","onInput","isProfane","currentTarget","textContent","style","backgroundColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,2JCIvCC,G,YAAS,IADAC,EAAQ,MAsENC,E,kDA/Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAsBVC,SAvBqB,uCAuBV,WAAOC,GAAP,eAAAC,EAAA,sDACRD,EAAEE,kBACIC,EAAS,IAAIC,YACZC,OAAP,uCAAgB,WAAOL,GAAP,eAAAC,EAAA,sDACRK,EAAQN,EAAEO,OAAOC,OACvBC,QAAQC,IAAIJ,GACZK,MAAML,GACNM,SAASC,eAAe,OAAOC,UAAWR,EACzCM,SAASC,eAAe,OAAOE,UAAWT,EAL7B,2CAAhB,sDAOAH,EAAOa,WAAWhB,EAAEO,OAAOU,MAAM,IAVzB,2CAvBU,sDAEjB,EAAKC,MAAQC,IAAMC,YAFF,E,0DAOjB,IAAMC,EAAUT,SAASU,cAAc,KAChCC,EAAO,IAAIC,KAAK,CAACZ,SAASC,eAAe,OAAOE,WAAY,CAACU,KAAM,eACzEJ,EAAQK,KAAOC,IAAIC,gBAAgBL,GACnCF,EAAQQ,SAAW,oBACnBjB,SAASkB,KAAKC,YAAYV,GAC1BA,EAAQW,U,+BAQbpB,SAASC,eAAe,OAAOC,UAAYnB,EAAOsC,MAAMrB,SAASC,eAAe,OAAOC,a,+BAgB3E,IAAD,OAET,OAEE,yBAAKoB,UAAU,OACf,6BACE,2BAAOT,KAAK,OAAOU,SAAU,SAACnC,GAAD,OAAO,EAAKD,SAASC,OAEpD,4BAAQoC,gBAAgB,QAAQC,QAASC,KAAKC,aAA9C,qBAEA,4BAAQH,gBAAgB,QAAQC,QAASC,KAAKE,QAA9C,UACE,yBAAKC,GAAG,MAAMP,UAAU,MAAME,gBAAgB,OAAOM,QAAS,SAAA1C,GAAC,OAAIL,EAAOgD,UAAU3C,EAAE4C,cAAcC,cAAcC,MAAO,CAACC,gBAAgB,UAA1I,c,GAhDY5B,IAAM6B,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5C,SAASC,eAAe,SDyHpB,kBAAmB4C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.2d02691f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nvar Filter = require('bad-words'),\n    filter = new Filter();\n\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n\n  }\n\n  handleClick() {\n    const element = document.createElement(\"a\");\n     const file = new Blob([document.getElementById('doc').innerText], {type: 'text/plain'});\n     element.href = URL.createObjectURL(file);\n     element.download = \"file-censored.txt\";\n     document.body.appendChild(element); // Required for this to work in FireFox\n     element.click();\n   }\n\n\n\n\n\ncensor(){\ndocument.getElementById('doc').innerHTML=  filter.clean(document.getElementById('doc').innerHTML);\n}\n\nshowFile = async (e) => {\n   e.preventDefault()\n   const reader = new FileReader()\n   reader.onload = async (e) => {\n     const text = (e.target.result)\n     console.log(text)\n     alert(text)\n     document.getElementById('doc').innerHTML= text;\n      document.getElementById('doc').innerText= text;\n   };\n   reader.readAsText(e.target.files[0])\n }\n\n  render() {\n\n  return (\n\n    <div className=\"App\">\n    <div>\n      <input type=\"file\" onChange={(e) => this.showFile(e)} />\n    </div>\n    <button contentEditable='false' onClick={this.handleClick}>Generate Document</button>\n\n    <button contentEditable='false' onClick={this.censor}>Censor</button>\n      <div id=\"doc\" className=\"pdf\" contentEditable='true' onInput={e => filter.isProfane(e.currentTarget.textContent)} style={{backgroundColor:\"white\"}}>\nhello\n    </div>\n\n\n</div>\n\n\n  );\n}\n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}